#pragma once
#include "abc_000_macro.h"

//#include "intrin.h"     //_rdstc
//#include <stdio.h>	  //fprintf fopen FILE
//#include <stdlib.h>    //malloc and free
//include  <string.h>	  //memset memcpy
//#include <io.h>
 


#define QUOTE_IT(x) #x

#ifdef MSVC_COMPILER
	#if R_INTERFACE==1
		#define DllExport   __declspec( dllexport ) 
	#elif M_INTERFACE==1
		#define DllExport 
		#pragma comment(linker, "/export:mexFunction")  //(Linker option) export:mexFunction   
    #endif

	#define INCLUDE_PTHREAD(_X_) QUOTE_IT(C:/USERS/zehaokg/Documents/Visual Studio 2013/Projects/Matlab_Mex_Test/Pthread_IncludeLib/_X_ )
	#define INCLUDE_MATLAB(_X_)  QUOTE_IT(C:/Program Files/MATLAB/R2019a/extern/include/_X_ )
	#define INCLUDE_MKL(_X_)     QUOTE_IT(C:/Program Files (x86)/Intel/oneAPI/mkl/latest/include/_X_ )
	#define INCLUDE_IPP(_X_)     QUOTE_IT(C:/Program Files (x86)/Intel/oneAPI/ipp/latest/include/_X_ )
	#define INCLUDE_R(_X_)       QUOTE_IT(C:/Program Files/R/R-3.6.2/include/_X_ )

	#define LIB_PTHREAD(_X_) QUOTE_IT(C:/USERS/zhaokg/Documents/Visual Studio 2013/Projects/Matlab_Mex_Test/Pthread_IncludeLib/_X_ )
	#define LIB_MATLAB(_X_)  QUOTE_IT(C:/Program Files/MATLAB/R2019a/extern/lib/win64/microsoft/_X_ )
	#define LIB_TBB(_X_)     QUOTE_IT(C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/tbb/lib/intel64_win/vc_mt/_X_ )
	//#define LIB_TBBstatic(_X_) QUOTE_IT(G:/Intel_Library/tbb-2019_U3/build/vs2013/x64/Release-MT/_X_ )
	#define LIB_MKL(_X_)     QUOTE_IT(C:/Program Files (x86)/Intel/oneAPI/mkl/latest/lib/intel64/_X_ )
	#define LIB_IPP(_X_)     QUOTE_IT(C:/Program Files (x86)/Intel/oneAPI/ipp/latest/lib/intel64/_X_ )
    #define LIB_OpenMP(_X_)  QUOTE_IT(C:/Program Files (x86)/IntelSWTools/compilers_and_libraries/windows/compiler/lib/intel64_win/_X_ )
	#define LIB_MyLIB(_X_)   QUOTE_IT(C:/Share/Fortran_blas_lib/_X_ )
#ifdef TARGET_32
	#define LIB_R(_X_)       QUOTE_IT(C:/Program Files/R/R-4.1.0/implib/i386/_X_ )
#else
	#define LIB_R(_X_)       QUOTE_IT(C:/Program Files/R/R-4.1.0/implib/_X_ )
#endif
	#define LIB_FORTRAN(_X_) QUOTE_IT(C:/Program Files (x86)/Intel/oneAPI/compiler/latest/windows/compiler/lib/intel64_win/_X_ )

	#if R_INTERFACE==1
        // The R import libs are generated by:
         // gendef  Rlapack.dll
         // lib /def:Rlapack.def /machine:x64 /out:Rlapack.lib
		#pragma comment( lib , LIB_R(R.lib)       )
		#pragma comment( lib , LIB_R(Rblas.lib)   )
		#pragma comment( lib , LIB_R(Rlapack.lib) )
	#endif

#elif defined(CLANG_COMPILER)|| defined(GCC_COMPILER) ||defined(SOLARIS_COMPILER)
 //GNU ==1 ##############################
	#define  DllExport  
	#ifndef _GNU_SOURCE
		#define _GNU_SOURCE
	#endif
	#include <fenv.h>	
#endif

#define PTHREAD_INOUT 0
#if PTHREAD_INOUT == 1
	#include INCLUDE_PTHREAD(pthread.h) //#include "pthread.h"
	#pragma comment(lib , LIB_PTHREAD(pthreadVC2.lib) )
#endif

#if MKL_LIBRARY == 1
	//#include "mkl.h"   //#include "mkl_vsl.h"  
	//#include "ipps.h"

	#include INCLUDE_IPP(ipps.h)
	#include INCLUDE_MKL(mkl.h)

/*
	#pragma comment(lib , LIB_MKL(mkl_intel_ilp64.lib) )
	#pragma comment(lib , LIB_MKL(mkl_core.lib))
    #pragma comment(lib , LIB_MKL(mkl_tbb_thread.lib) )
	#pragma comment(lib , LIB_TBB(tbb.lib))
    //#pragma comment(lib , LIB_TBBstatic(tbb.lib))
    //#pragma comment(lib , LIB_TBBstatic(tbbmalloc.lib))
    //#pragma comment(lib , LIB_TBBstatic(tbbmalloc_proxy.lib))
	//#pragma comment(lib , LIB_MKL(mkl_intel_thread.lib))
	//#pragma comment(lib , LIB_OpenMP(libiomp5md.lib))
*/

    // Non-threaded sequential library 
	#pragma comment(lib , LIB_MKL(mkl_intel_ilp64.lib) )
	#pragma comment(lib , LIB_MKL(mkl_core.lib))
	#pragma comment(lib , LIB_MKL(mkl_sequential.lib) )

	#pragma comment(lib , LIB_IPP(ippcoremt.lib))
	#pragma comment(lib , LIB_IPP(ippvmmt.lib))  // Vector math
	#pragma comment(lib , LIB_IPP(ippsmt.lib))   // Signal processing 

#endif


#if (MYMAT_LIBRARY ==1) && defined(MSVC_COMPILER) && 0
	#pragma comment(lib , LIB_MyLIB(blas_oneAPI.lib))

     /* 
	 Liblifcormdd.lib is an import lib for the Multithread runtime DLL. If used, 
	 libifcoremdd.dll must be also supplised. To use the static version instead,
	 compile blas.lib by setting "Fortran->Libary->Multithreaded" and 
	 "Librian->Additional depencies->libifcoremt.lib" as well as Librian->Link Libray dependencies (yes). 
	 This way, "libifcoremt.lib" will be inserted into blas.lib. 
	 */
	//#pragma comment(lib , LIB_FORTRAN(libifcoremdd.lib))

    // The libs below are needed for linking the static lib "blas.lib"; they
    // are Intel Fortran's runtime-like librareies. These should be all static lib
    // (e.g., libifcoremt: multithreaded static lib).
    #pragma comment(lib , LIB_FORTRAN(ifconsol.lib))
    #pragma comment(lib , LIB_FORTRAN(libifcoremt.lib))
	#pragma comment(lib , LIB_FORTRAN(libifport.lib))
	#pragma comment(lib , LIB_FORTRAN(libirc.lib))
	#pragma comment(lib , LIB_FORTRAN(libircmt.lib)) //Needed for the oneAPI version of Fortran
	#pragma comment(lib , LIB_FORTRAN(libmmt.lib))	
    #pragma comment(lib , LIB_FORTRAN(svml_dispmt.lib))	
	#pragma comment(lib , LIB_FORTRAN(ifmodintr.lib))	
#endif

#if  MATLAB_LIBRARY == 1
	#include "blas.h" 
	#include "lapack.h"
	#pragma comment(lib , LIB_MATLAB(libmwblas.lib) )
	#pragma comment(lib , LIB_MATLAB(libmwlapack.lib) )
	#pragma comment(lib , LIB_MyLIB(blas.lib))
	#pragma comment(lib , LIB_FORTRAN(libifcoremdd.lib))
#endif

 
#if M_INTERFACE ==1
	#define MEX_DOUBLE_HANDLE
	#include  "mex.h"
	#pragma comment(lib , LIB_MATLAB(libmx.lib) )
	#pragma comment(lib , LIB_MATLAB(libmex.lib) )
	#pragma comment(lib , LIB_MATLAB(libmat.lib) )
    #pragma comment(lib,  LIB_MATLAB(libmwservices.lib) )	 
    #pragma comment(lib , LIB_MATLAB(libut.lib) ) 
    // https://stackoverflow.com/questions/26271154/how-can-i-make-a-mex-function-printf-while-its-running/26271557
    //    libmwservices: for ioFlush (this is a C++ function with naming managling)
	// https://www.advanpix.com/2016/07/02/devnotes-3-proper-handling-of-ctrl-c-in-mex-module/
    //    libut.lib :    for utIsInterruptPending and utSetInterruptPending(bool); 
#endif

#if R_INTERFACE == 1
    
   #ifdef ERROR 
       #undef ERROR  //ERROR is defined in both windwos.h/wingdi.h and R.h
   #endif

	#include <R.h>
	#include <Rinternals.h>
	#include <Rdefines.h>
	#include "Rmath.h"
	#include "R_ext/GraphicsEngine.h"
	#include "R_ext/GraphicsDevice.h"	
	#if MYMAT_LIBRARY ==1
		//#include "R_ext\Lapack.h"
		//#include "R_ext\BLAS.h"
	#endif

	//#include <R_ext\Rdynload.h>

	#define mwSize size_t


#endif

